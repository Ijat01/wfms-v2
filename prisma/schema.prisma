generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("WFMS_PRISMA_URL")
  directUrl = env("WFMS_URL_NON_POOLING")
}

model bookings {
  booking_id Int        @id @default(autoincrement())
  user_id    String     @db.VarChar(14)
  package_id String?    @db.VarChar(255)
  groom_name String     @db.VarChar(255)
  bride_name String     @db.VarChar(255)
  contact_no String     @db.VarChar(255)
  created_at DateTime   @default(now()) @db.Date
  updated_at DateTime?  @updatedAt
  lock_by    String?    @db.VarChar(255)
  packages   packages?  @relation(fields: [package_id], references: [package_id], onUpdate: SetNull)
  users      users      @relation(fields: [user_id], references: [user_id], onUpdate: Restrict)
  events     events[]
  payments   payments[]

  @@index([package_id], map: "FK")
  @@index([user_id], map: "USERBOOKING_FK")
}

model package_packageitems {
  pack_id         Int           @id @default(autoincrement())
  package_id      String?       @db.VarChar(11)
  packageitems_id Int?
  packages        packages?     @relation(fields: [package_id], references: [package_id], onUpdate: Restrict)
  packageitems    packageitems? @relation(fields: [packageitems_id], references: [packageitem_id], onUpdate: Restrict)

  @@index([packageitems_id], map: "PACKAGEITEM_FK")
  @@index([package_id], map: "PACKAGE_FK")
  @@map("package-packageitems")
}

model packageitems {
  packageitem_id          Int                    @id @default(autoincrement())
  packageitem_name        String?                @db.VarChar(255)
  packageitem_description String?                @db.VarChar(255)
  created_at              DateTime?              @default(now()) @db.Date
  updated_at              DateTime?              @updatedAt
  package_packageitems    package_packageitems[]
}

model packages {
  package_id           String                 @id @db.VarChar(255)
  package_type         String                 @db.VarChar(255)
  package_name         String                 @db.VarChar(255)
  package_description  String?                @db.VarChar(255)
  created_at           DateTime               @default(now()) @db.Date
  updated_at           DateTime?              @updatedAt
  bookings             bookings[]
  package_packageitems package_packageitems[]
}

model payments {
  payment_id      Int              @id @default(autoincrement())
  booking_id      Int?
  created_at      DateTime?        @default(now()) @db.Date
  updated_at      DateTime?        @updatedAt
  payment_total   Int?
  payment_balance Int?
  paymentdetails  paymentdetails[]
  bookings        bookings?        @relation(fields: [booking_id], references: [booking_id], onDelete: Cascade, onUpdate: Restrict)

  @@index([booking_id], map: "BOOKING_FK")
}

model tasks {
  task_id          Int       @id @default(autoincrement())
  task_status      String?   @db.VarChar(255)
  created_at       DateTime? @default(now()) @db.Date
  updated_at       DateTime? @updatedAt
  event_id         Int?
  task_description String?   @db.VarChar(255)
  task_duedate     DateTime? @db.Date
  task_role        String?   @db.VarChar(255)
  user_id          String?   @db.VarChar(14)
  events           events?   @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  users            users?    @relation(fields: [user_id], references: [user_id], onUpdate: Restrict)

  @@index([user_id], map: "USERTASK_FK")
  @@index([event_id], map: "EVENTTASK_FK")
}

model events {
  event_id      Int       @id @default(autoincrement())
  event_type    String?   @db.VarChar(255)
  event_status  String?   @db.VarChar(255)
  event_date    DateTime? @db.Date
  event_address String?   @db.VarChar(255)
  created_at    DateTime? @default(now()) @db.Date
  updated_at    DateTime? @updatedAt
  booking_id    Int?
  event_time    String?   @db.VarChar(255)
  bookings      bookings? @relation(fields: [booking_id], references: [booking_id], onDelete: Cascade, onUpdate: Restrict)
  tasks         tasks[]

  @@index([booking_id], map: "BOOKINGT_FK")
}

model users {
  user_id       String     @id @db.VarChar(14)
  user_fullname String     @db.VarChar(255)
  user_email    String     @unique @db.VarChar(255)
  user_role     String     @db.VarChar(255)
  user_password String     @db.VarChar(255)
  created_at    DateTime   @default(now()) @db.Date
  updated_at    DateTime?  @updatedAt
  created_by    String?    @db.VarChar(14)
  bookings      bookings[]
  tasks         tasks[]
  users         users?     @relation("usersTousers", fields: [created_by], references: [user_id], onUpdate: SetNull)
  other_users   users[]    @relation("usersTousers")

  @@index([created_by], map: "USERUSER_FK")
}

model paymentdetails {
  paymentdetails_id     Int       @id @default(autoincrement())
  paymentdetails_type   String    @db.VarChar(255)
  paymentdetails_desc   String    @db.VarChar(255)
  paymentdetails_status String    @db.VarChar(255)
  paymentdetails_amount Int
  payment_id            Int?
  created_at            DateTime  @default(now()) @db.Date
  updated_at            DateTime? @updatedAt
  payments              payments? @relation(fields: [payment_id], references: [payment_id], onDelete: Cascade, onUpdate: Restrict)

  @@index([payment_id], map: "PAYMENTDETAILS_PAYMENT_FK")
}
