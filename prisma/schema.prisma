generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bookings {
  booking_id    Int        @id @default(autoincrement())
  user_id       String?    @db.VarChar(14)
  package_id    String?    @db.VarChar(255)
  groom_name    String?    @db.VarChar(255)
  bride_name    String?    @db.VarChar(255)
  event_date    DateTime?  @db.Date
  event_type    String?    @db.VarChar(255)
  event_address String?    @db.VarChar(255)
  contact_no    String?    @db.VarChar(255)
  created_at    DateTime?  @default(now()) @db.Date
  updated_at    DateTime?  @updatedAt
  packages      packages?  @relation(fields: [package_id], references: [package_id], onUpdate: SetNull, map: "FK")
  users         users?     @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "USERBOOKING_FK")
  payments      payments[]
  tasks         tasks[]

  @@index([package_id], map: "FK")
  @@index([user_id], map: "USERBOOKING_FK")
}

model package_packageitems {
  pack_id         Int           @id @default(autoincrement())
  package_id      String?       @db.VarChar(11)
  packageitems_id Int?
  packageitems    packageitems? @relation(fields: [packageitems_id], references: [packageitem_id], onDelete: Restrict, onUpdate: Restrict, map: "PACKAGEITEM_FK")
  packages        packages?     @relation(fields: [package_id], references: [package_id], onDelete: Restrict, onUpdate: Restrict, map: "PACKAGE_FK")

  @@index([packageitems_id], map: "PACKAGEITEM_FK")
  @@index([package_id], map: "PACKAGE_FK")
  @@map("package-packageitems")
}

model packageitems {
  packageitem_id          Int                    @id @default(autoincrement())
  packageitem_name        String?                @db.VarChar(255)
  packageitem_description String?                @db.VarChar(255)
  created_at              DateTime?              @default(now()) @db.Date
  updated_at              DateTime?              @updatedAt
  package_packageitems    package_packageitems[]
}

model packages {
  package_id           String                 @id @db.VarChar(255)
  package_type         String?                @db.VarChar(255)
  package_name         String?                @db.VarChar(255)
  package_description  String?                @db.VarChar(255)
  created_at           DateTime?              @default(now()) @db.Date
  updated_at           DateTime?              @updatedAt
  bookings             bookings[]
  package_packageitems package_packageitems[]
}

model payments {
  payment_id          Int       @id @default(autoincrement())
  booking_id          Int?
  payment_status      String?   @db.VarChar(255)
  payment_type        String?   @db.VarChar(255)
  payment_balance     String?   @db.VarChar(255)
  payment_amount      Int?
  payment_receipt     String?   @db.VarChar(255)
  payment_description String?   @db.VarChar(255)
  created_at          DateTime? @default(now()) @db.Date
  updated_at          DateTime? @updatedAt
  bookings            bookings? @relation(fields: [booking_id], references: [booking_id], onDelete: Restrict, onUpdate: Restrict, map: "BOOKING_FK")

  @@index([booking_id], map: "BOOKING_FK")
}

model taskassignments {
  taskassignment_id          Int       @id @default(autoincrement())
  task_id                    Int?
  user_id                    String?   @db.VarChar(14)
  taskassignment_role        String?   @db.VarChar(255)
  taskassignment_description String?   @db.VarChar(255)
  taskassignment_status      String?   @db.VarChar(255)
  created_at                 DateTime? @default(now()) @db.Date
  updated_at                 DateTime? @updatedAt
  tasks                      tasks?    @relation(fields: [task_id], references: [task_id], onUpdate: SetNull, map: "TASK_FK")
  users                      users?    @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "USERTASK_FK")

  @@index([task_id], map: "TASK_FK")
  @@index([user_id], map: "USERTASK_FK")
}

model tasks {
  task_id         Int               @id @default(autoincrement())
  booking_id      Int?
  task_status     String?           @db.VarChar(255)
  task_type       String?           @db.VarChar(255)
  created_at      DateTime?         @default(now()) @db.Date
  updated_at      DateTime?         @updatedAt
  taskassignments taskassignments[]
  bookings        bookings?         @relation(fields: [booking_id], references: [booking_id], onUpdate: SetNull, map: "BOOKINGT_FK")

  @@index([booking_id], map: "BOOKINGT_FK")
}

model users {
  user_id         String            @id @db.VarChar(14)
  user_fullname   String            @db.VarChar(255)
  user_email      String            @db.VarChar(255)
  user_role       String            @db.VarChar(255)
  user_password   String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Date
  updated_at      DateTime?         @updatedAt
  created_by      String?           @db.VarChar(14)
  bookings        bookings[]
  taskassignments taskassignments[]
  users           users?            @relation("usersTousers", fields: [created_by], references: [user_id], onUpdate: SetNull, map: "USERUSER_FK")
  other_users     users[]           @relation("usersTousers")

  @@index([created_by], map: "USERUSER_FK")
}
